read.arff()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
read.arff(C:\Dropbox\Persoonlijk\Data Mining\Titanic\extracted_train.arff)
read.arff("C:\Dropbox\Persoonlijk\Data Mining\Titanic\extracted_train.arff")
read.arff("C:/Dropbox/Persoonlijk/Data Mining/Titanic/extracted_train.arff")
titanic <- read.arff("C:/Dropbox/Persoonlijk/Data Mining/Titanic/extracted_train.arff")
titanic
summary(titanic)
nlevels(titanic)
nlevels(titanic$pcclass)
length(which(is.na(titanic$ticket_prefix)))
titanic$ticket_prefix
titanic$sex
attach(titanic)
titanic$sex
titanic
length(titanic)
mode(titanic)
$titanic.se
$titanic.sex
titanic.$titanic.sex
titanic.se
titanic.sex
titanic[1]
titanic[[1]]
mode(titanic[[1]])
titanic.lst
titanic$titanic.sex
titanic$titanic.pcclass
names(titanic)
titanic <- read.arff("C:/Dropbox/Persoonlijk/Data Mining/Titanic/extracted_train.arff")
names(titanic)
titanic$pcclass
nlevels(titanic$pcclass)
summary(titanic)
length(which(is.na(titanic$age) & is.na(titanic$ticket_prefix) & is.na(titanic$cabin_letter) & is.na(titanic$cabin_number_avg)))
length(which(is.na(titanic$ticket_prefix) & is.na(titanic$cabin_letter) & is.na(titanic$cabin_number_avg)))
length(titanic)
length(titanic$pcclass)
princomp
princomp(titanic)
str(titanic)
dim(titanic)
attributes(titanic)
head(titanic)
summary(titanic)
quantile(titanic)
quantile(titanic$survived)
quantile(titanic$parch)
quantile(titanic$fare)
hist(titanic)
hist(titanic$fare)
plot(density(titanic$fare))
density(titanic$fare)
plot(summary(titanic))
attributes(titanic)
pie(titanic$survived)
barplot(titanic$survived)
pie(table(titanic$survived))
barplot(table(titanic$survived))
barplot(table(titanic$pcc))
pie(table(titanic$pcc))
cov(titanic$sex, titanic$survived)
cor(titanic$sex, titanic$survived)
aggregate(sex ~ survived, summary, data=titanic)
boxplot(sex ~ survived, data=titanic)
boxplot(sex~survived, data=titanic)
boxplot(aggregate(sex~survived, summary, data=titanic))
boxplot(sex~survived, data=titanic)
boxplot(as.numeric(sex)~survived, data=titanic)
barplot(sex~survived, data=titanic)
boxplot(pcc~survived, data=titanic)
boxplot(pcclass~survived, data=titanic)
boxplot(as.numeric(pcclass)~survived, data=titanic)
with(titanic, plot(as.numeric(sex),as.numeric(pcc),col=survived,pch=as.numeric(survived)))
with(titanic, plot(as.numeric(sex),as.numeric(pcclass),col=survived,pch=as.numeric(survived)))
head(titanic)
with(titanic, plot(age,fare,col=survived,pch=as.numeric(survived)))
with(titanic, plot(ticket_number,fare,col=survived,pch=as.numeric(survived)))
with(titanic, plot(as.numeric(sex),fare,col=survived,pch=as.numeric(survived)))
with(titanic, plot(jitter(as.numeric(sex)),fare,col=survived,pch=as.numeric(survived)))
pairs(titanic)
pairs(as.numeric(titanic))
which(is.na(titanic))
sum(!is.na(titanic))
sum(is.na(titanic))
pairs(titanic)
attributes(titanic)
prop(titanic)
head(titanic)
pairs(titanic)
GKtau
library(scatterplot3d)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(scatterplot3d)
scatterplot3d(as.numeric(titanic$survived),as.numeric(titanic$sex),as.numeric(titanic$pcclass))
scatterplot3d(jitter(as.numeric(titanic$survived)),as.numeric(titanic$sex),as.numeric(titanic$pcclass))
dist(titanic)
heatmap(as.matrix(dist(titanic)))
head(titanic)
titanicFormula <- survived ~ as.numeric(sex) + as.numeric(pcclass)
titanic.glm <- glm(titanicFormula, family = gaussian("log"), data = titanic)
titanicFormula <- as.numeric(survived) ~ as.numeric(sex) + as.numeric(pcclass)
titanic.glm <- glm(titanicFormula, family = gaussian("log"), data = titanic)
summary(titanic.glm)
pred <- predict(titanic.glm, type = "response")
plot(titanic$survived, pred, xlab="Observed Values", ylab="Predicted Values")
utils:::menuInstallPkgs()
library(gbm)
head(titanic)
titanic.gbm <- gbm(suvived ~ pcclass + sex + age + sibsp + parch + ticket_prefix + ticket_number + fare + cabin_amount + cabin_letter, data=titanic, distribution="adaboost", n.trees=100)
titanic.gbm <- gbm(survived ~ pcclass + sex + age + sibsp + parch + ticket_prefix + ticket_number + fare + cabin_amount + cabin_letter, data=titanic, distribution="adaboost", n.trees=100)
load("C:\\Users\\Niek.Niek-PC\\Documents\\.RData")
titanic
utils:::menuInstallPkgs()
rattle()
library(rattle)
rattle()
sdf
hist()
help(hist)
str(hist)
hist(titanic$sibsp)
hist(titanic$sibsp)
print(hist(titanic$sibsp))
hist(titanic$sibsp)
titanic
summary(titanic)
rattle()
hw1 <- read.csv("C:\Dropbox\Persoonlijk\Data Mining\Computing for Data Analysis\hw1_data.csv",header=T)
hw1 <- read.csv("C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\hw1_data.csv",header=T)
hw1
str(hw1)
hw1[1:2]
hw1[,1:2]
hw1[1:2,]
hw1[1:2,1:2]
hw1[1:2,]
hw1[152:153,]
hw1[length-2:length-1,]
hw1[length(hw1)-2:length-1,]
hw1[length(hw1)-2:length(hw1)-1,]
length(hw1)
length(hw1[1])
length(hw1[[1]])
length(hw1[[1]])
hw1[length(hw1[[1]])-2:length(hw1[[1]])-1]
hw1
hw1$Ozone
hw1$Ozone[47]
hw1[Ozone[47]]
hw1[[Ozone[47]]]
hw1$Ozone[47]
hw1$Ozone[NaN]
hw1$Ozone[Na]
hw1$Ozone["Na"]
hw1$Ozone["NaN"]
hw1$Ozone[isNaN()]
hw1$Ozone[is.NaN()]
hw1$Ozone[is.na()]
hw1[hw1$Ozone==NaN]
hw1[hw1$Ozone==NaN,"Ozone"]
hw1[hw1$Ozone==Na,"Ozone"]
hw1
hw1[is.na(hw1$Ozone)]
hw1$Ozone[is.na(hw1$Ozone)]
length(hw1$Ozone[is.na(hw1$Ozone)])
length(hw1[is.na(hw1$Ozone)])
hw1$Ozone[!is.na(hw1$Ozone)]
temp <- hw1$Ozone[!is.na(hw1$Ozone)]
temp
summary(temp)
mean(temp)
min(temp)
median(temp)
max(temp)
mod(temp)
modus(temp)
1stqu(temp)
hw1
hw1[hw1$Ozone>31]
hw1[(hw1$Ozone>31)]
hw1$Solar.R[(hw1$Ozone>31)]
hw1[(hw1$Ozone>31)]
hw1[hw1$Ozone>31,]
hw1[hw1$Ozone >= 30,]
hw1[hw1$Ozone > 31 & hw1$Temp > 90,]
temp <- hw1[hw1$Ozone > 31 & hw1$Temp > 90,]
temp
summary(temp)
hw1[hw1$month==6]
hw1
hw1[hw1$month==6,]
hw1[hw1$Month==6,]
temp <- hw1[hw1$Month==6,]
summary(temp)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
getmonitor <- function(id, directory, summarize = FALSE) {
        ## 'id' is a vector of length 1 indicating the monitor ID
        ## number. The user can specify 'id' as either an integer, a
        ## character, or a numeric.
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'summarize' is a logical indicating whether a summary of
        ## the data should be printed to the console; the default is
        ## FALSE
        ## Your code here
}
getmonitor
getmonitor()
?getmonitor
str(getmonitor)
getmonitor(2,"C:\Dropbox\Persoonlijk\Data Mining\Computing for Data Analysis\specdata\")
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",false)
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
getmonitor(1,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
debug(getmonitor(1,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata"))
s
getmonitor
getmonitor <- function(id, directory, summarize = FALSE) {
      ## 'id' is a vector of length 1 indicating the monitor ID
      ## number. The user can specify 'id' as either an integer, a
      ## character, or a numeric.
      ## 'directory' is a character vector of length 1 indicating
      ## the location of the CSV files
      ## 'summarize' is a logical indicating whether a summary of
      ## the data should be printed to the console; the default is
      ## FALSE
temp <- list.files(path=directory)
value = temp[id]      
if(summarize){
value = summary(value)
}
return(value)
}
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
getmonitor(1,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor(0,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor <- function(id, directory, summarize = FALSE) {
      ## 'id' is a vector of length 1 indicating the monitor ID
      ## number. The user can specify 'id' as either an integer, a
      ## character, or a numeric.
      ## 'directory' is a character vector of length 1 indicating
      ## the location of the CSV files
      ## 'summarize' is a logical indicating whether a summary of
      ## the data should be printed to the console; the default is
      ## FALSE
temp  <- list.files(path=directory)
value <-read.csv(temp[id],header=TRUE)    
if(summarize){
value = summary(value)
}
return(value)
}
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",F)
getmonitor(0,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",F)
getmonitor(201,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",F)
getmonitor(1,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",F)
getmonitor(333,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",F)
getmonitor <- function(id, directory, summarize = FALSE) {
      ## 'id' is a vector of length 1 indicating the monitor ID
      ## number. The user can specify 'id' as either an integer, a
      ## character, or a numeric.
      ## 'directory' is a character vector of length 1 indicating
      ## the location of the CSV files
      ## 'summarize' is a logical indicating whether a summary of
      ## the data should be printed to the console; the default is
      ## FALSE
dir   <- list.files(path=directory)
fil<- paste(directory, list[id], collapse = "")
value <-read.csv(fil,header=TRUE)    
if(summarize){
value = summary(value)
}
return(value)
}
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor <- function(id, directory, summarize = FALSE) {
      ## 'id' is a vector of length 1 indicating the monitor ID
      ## number. The user can specify 'id' as either an integer, a
      ## character, or a numeric.
      ## 'directory' is a character vector of length 1 indicating
      ## the location of the CSV files
      ## 'summarize' is a logical indicating whether a summary of
      ## the data should be printed to the console; the default is
      ## FALSE
dir   <- list.files(path=directory)
fil<- paste(directory, dir[id], collapse = "")
value <-read.csv(fil,header=TRUE)    
if(summarize){
value = summary(value)
}
return(value)
}
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor <- function(id, directory, summarize = FALSE) {
      ## 'id' is a vector of length 1 indicating the monitor ID
      ## number. The user can specify 'id' as either an integer, a
      ## character, or a numeric.
      ## 'directory' is a character vector of length 1 indicating
      ## the location of the CSV files
      ## 'summarize' is a logical indicating whether a summary of
      ## the data should be printed to the console; the default is
      ## FALSE
dir   <- list.files(path=directory)
fil<- paste(directory, dir[id], sep = "")
value <-read.csv(fil,header=TRUE)    
if(summarize){
value = summary(value)
}
return(value)
}
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\")
getmonitor(2,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
getmonitor(1,"C:\\Dropbox\\Persoonlijk\\Data Mining\\Computing for Data Analysis\\specdata\\",T)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
gzfile()
png()
g()
points()
save()
?par
?lattice
outcome
titanic
hist(titanic)
hist(titanic$id)
names(titanic)
hist(titanic$sex)
hist(titanic$age)
plot(sex ~ pcclass)
plot(sex ~ pcclass, titanic)
plot(pcclass ~ sex, titanic)
plot(pcclass ~ parch, titanic)
plot(pcclass ~ sibsp, titanic)
plot(survived ~ sibsp, titanic)
plot(cabin_number_avg ~ sex, titanic)
plot(sex ~ sex, titanic)
titanic
header(titanic)
head(titanic)
plot(survived~pcclass,titanic)
png('pcclass.png')
plot(survived~pcclass,titanic)
dev.off()
getwd()
setwd("c:/github/kaggle-twente/");
png('pcclass.png')
plot(survived~pcclass,titanic)
dev.off()
plot(titanic)
ggplot(titanic)
utils:::menuInstallPkgs()
library("ggplots");
library("ggplot")
library("gg2plots")
library("ggplot2")
ggplot(titanic)
ggplot(titanic~titanic)
plot(titanic~titanic)
