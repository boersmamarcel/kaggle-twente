random = randomForest(survived ~ trainingset$sex, trainingset, proximity=TRUE)
View(trainingset)
random = randomForest(survived ~ trainingset$sex + trainingset$pclass + trainingset$age + trainingset$sibsp + trainingset$parch + trainingset$fare + trainingset$embarked, trainingset)
ages = trainingset[which(!is.na(trainingset$ages))]
ages = trainingset[which(!is.na(trainingset$ages)),]
View(ages)
is.na(trainingset$age)
ages = trainingset[which(!is.na(trainingset$age)),]
library(ggplot2)
ages.df = data.frame(ages)
ggplot(ages, aes(x=age))+geom_bar()
ggplot(ages, aes(x=age))+geom_denisity()
ggplot(ages, aes(x=age))+geom_density()
ggplot(ages, aes(x=age, colour = survived))+geom_density()
ggplot(ages, aes(x=age, y = survived))
ggplot(ages, aes(x=age, y = survived))+geom_point()
ages.dead = ages.df[which(ages$survived == 0),]
ages.alive = ages.df[which(ages$suvived == 1), ]
ggplot(ages.dead, aes(x=age)) + geom_density()
View(ages.dead)
ages.alive = ages.df[which(ages$survived == 1), ]
ggplot(ages.dead, aes(x=age)) + geom_density()
ggplot(ages.alive, aes(x=age)) + geom_density()
ggplot(ages.dead, aes(x=age)) + geom_density()
ggplot(ages) + geom_denisity(data=age.dead)+geom_density(data=ages.alive)
ggplot(ages) + geom_density(data=age.dead)+geom_density(data=ages.alive)
ggplot(ages) + geom_density(data=ages.dead)+geom_density(data=ages.alive)
ggplot(aes(x=age)) + geom_density(data=ages.dead)+geom_density(data=ages.alive)
ggplot(aes(x=age)) + geom_density(aes(x=age),data=ages.dead)+geom_density(aes(x=age),data=ages.alive)
ggplot() + geom_density(aes(x=age),data=ages.dead)+geom_density(aes(x=age),data=ages.alive)
ggplot() + geom_density(aes(x=age, colour="red"),data=ages.dead)+geom_density(aes(x=age, colour="green"),data=ages.alive)
random = randomForest(as.factor(survived) ~ trainingset$sex, trainingset, proximity=TRUE)
names(testset)
predict_test = predict(random, testset[,2:9])
testset[,2:9]
predict_test = predict(random, testset[,2:9])
predict_test
random = randomForest(as.factor(survived) ~ trainingset$sex + trainingset$sibsp + trainingset$parch + trainingset$fare + as.factor(trainingset$embarked), trainingset, proximity=TRUE)
predict_test = predict(random, testset[,2:9])
predict_test = predict(random, testset[,c(3,5,6,8,9)])
testset[1,c(3,5,6,8,9)]
testset[1,c(4,6,7,9,10)]
predict_test = predict(random, testset[,c(4,6,7,9,10)])
testset$sex = as.factor(testset$sex)
testset$embarked = as.factor(testset$embarked)
predict_test = predict(random, testset[,c(4,6,7,9,10)])
warnings()
predict_test = predict(random, testset[,c(4,6,7,9,10)])
predict_test = predict(random, testset[1,c(4,6,7,9,10)])
predict(random, testset[1,c(4,6,7,9,10)])
fix(random)
predict(random)
summary(random)
predict(random, testset)
predict(random, newdata=testset)
random$confusion
setwd("~/Documents/Studie/challenges/kaggle-twente")
# Assumes that getwd() returns git repository folder
# Use setwd() to change R working directory if this is not the case
sub     <- sample(nrow(titanic),floor(nrow(titanic)*0.8))
train   <- titanic[sub,]
test    <- titanic[-sub,]
write.csv(train, "data/internal_validation/internal_train.csv")
write.csv(test,  "data/internal_validation/internal_test.csv")
source('~/Documents/Studie/challenges/kaggle-twente/scripts/train-test-splitter.R')
source('~/Documents/Studie/challenges/kaggle-twente/scripts/pca_with-sex.R')
source('~/Documents/Studie/challenges/kaggle-twente/scripts/pca.R')
test = read.table('data/test.csv')
test <- read.csv("~/Documents/Studie/challenges/kaggle-twente/data/test.csv")
View(test)
predict(random, test)
random = randomForest(as.factor(survived) ~ trainingset$sex + trainingset$sibsp + trainingset$parch + trainingset$fare + as.factor(trainingset$embarked), trainingset)
predict(random, test)
View(test)
predict(random, test[,c(3,5,6,8,10)])
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
view(iris)
View(irir)
View(iris)
iris[ind == 1,]
random_train_data = data.frame(as.factor(trainingset$survived), as.factor(trainingset$sex), trainingset$sibsp + trainingset$parch + traingingset$fare + as.factor(trainingset$embarked))
random_train_data = data.frame(as.factor(trainingset$survived), as.factor(trainingset$sex), trainingset$sibsp + trainingset$parch + trainingset$fare + as.factor(trainingset$embarked))
random_train_data = data.frame(as.factor(trainingset$survived), as.factor(trainingset$sex), trainingset$sibsp , trainingset$parch , trainingset$fare , as.factor(trainingset$embarked))
random_test_data = data.frame(as.factor(test$survived), as.factor(test$sex), test$sibsp , test$parch , test$fare , as.factor(test$embarked))
names(test)
random_test_data = data.frame(as.factor(test$survived), as.factor(test$sex), test$sibsp , test$parch , test$fare , as.factor(test$embarked))
random_test_data = data.frame(test$survived, test$sex, test$sibsp , test$parch , test$fare , test$embarked)
test = data.frame(test)
random_test_data = data.frame(as.factor(test$survived), as.factor(test$sex), test$sibsp , test$parch , test$fare , as.factor(test$embarked))
random_test_data = data.frame(as.factor(test$survived))
random_test_data = data.frame(as.factor(test$survived), as.factor(test$sex))
random_test_data = data.frame(as.factor(test$survived), test$sex)
test$sex
random_test_data = data.frame(as.factor(test$survived), test$sex)
random_test_data = data.frame(test$survived, test$sex)
length(test$survived)
size(test$survived)
nrow(test$survived)
dim(test$survived)
typeof(test$survived)
View(test)
random_test_data = data.frame( as.factor(test$sex), test$sibsp , test$parch , test$fare , as.factor(test$embarked))
predict(random, random_test_data)
predict(random, random_test_data, proximity=FALSE)
predict(random, trainingset[1:10])
predict(random, random_test_data[1:10])
predict(random, random_test_data[1:10,])
forest <- randomForest(survived ~ sex + pclass + age + fare + family,
data = trainingset, ntree = 15000, importance = TRUE)
forest <- randomForest(survived ~ sex + pclass + age + fare ,
data = trainingset, ntree = 15000, importance = TRUE)
importance(random)
predict(random, random_test_data[1:10,])
library(plyr)
library(foreign)
# Load the data sets
train <- read.csv("Data/train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("Data/test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Data structures
###
# Create a survived variable in the test data set
# Set "0" (did not survive) as the default value
test$survived <- 0
# Convert catagorical variables to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
test$survived <- factor(test$survived)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$embarked <- factor(test$embarked)
###
### Fixing missing values
###
# 177 missing ages in TRAIN
# 86 missing ages in TEST
# 1 missing fare in TEST
# 2 missing embarked in TRAIN
# Combine the data sets for age/fare modeling
full <- join(test, train, type = "full")
# Multiple Imputation
#library(mi)
#inf <- mi.info(train)
#imp <- mi(train, info = inf, check.coef.convergence = FALSE, n.imp = 2, n.iter = 6, seed = 111)
#plot(imp)
# Create LM models for predicting missing values in AGE and FARE
age.mod <- lm(age ~ pclass + sex +
sibsp + parch + fare, data = full)
fare.mod<- lm(fare ~ pclass + sex +
sibsp + parch + age, data = full)
# Replace missing values in AGE and FARE with prediction
train$age[is.na(train$age)] <- predict(age.mod, train)[is.na(train$age)]
test$age[is.na(test$age)] <- predict(age.mod, test)[is.na(test$age)]
test$fare[is.na(test$fare)] <- predict(fare.mod, test)[is.na(test$fare)]
# Random Forest to find missing values
#full.age <- full[!is.na(full$age), ]  # Remove NA's
#full.age$fare[is.na(full.age$fare)] <- predict(fare.mod, full.age)[is.na(full.age$fare)]
#age.rf <- randomForest(age ~ pclass + sex + sibsp + parch + fare, data = full.age, ntree = 15000)
#train$age[is.na(train$age)] <- predict(age.rf, train)[is.na(train$age)]
#test$age[is.na(test$age)] <- predict(age.rf, test)[is.na(test$age)]
# Replace missing values in embarked with most popular
train$embarked[train$embarked == ""] <- "S"
train$embarked <- factor(train$embarked)
###
### Create "sex.name" variable"
###
library(stringr)
train$sex.name <- 0
test$sex.name <- 0
train$sex.name[!is.na(str_extract(train$name, "Mr"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Mrs"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Mme"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Miss"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Ms"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Mlle"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Capt"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Major"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Col"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Master"))] <- "Mast"
train$sex.name[!is.na(str_extract(train$name, "Rev"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Dr"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Don"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Countess"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Jonkheer"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Mr"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Mrs"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Mme"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Miss"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Ms"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Mlle"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Capt"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Major"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Col"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Master"))] <- "Mast"
test$sex.name[!is.na(str_extract(test$name, "Rev"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Dr"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Don"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Countess"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Jonkheer"))] <- "Mr"
test$name[test$sex.name == 0]
train$name[train$sex.name == 0]
train$sex.name <- factor(train$sex.name)
test$sex.name <- factor(test$sex.name)
###
### Create "fare-distance" variable
###
# fare-distance = fare - mean(fare of pclass)
# Are those who pay less than the average for a ticket less likely to survive?
# Find the mean fare for each pclass
class1 <- subset(full, pclass == 1)
class2 <- subset(full, pclass == 2)
class3 <- subset(full, pclass == 3)
fare1 <- mean(class1$fare, na.rm = TRUE)
fare2 <- mean(class2$fare, na.rm = TRUE)
fare3 <- mean(class3$fare, na.rm = TRUE)
# Create fare_avg column
train$fare_avg[train$pclass == 1] <- fare1
train$fare_avg[train$pclass == 2] <- fare2
train$fare_avg[train$pclass == 3] <- fare3
test$fare_avg[test$pclass == 1] <- fare1
test$fare_avg[test$pclass == 2] <- fare2
test$fare_avg[test$pclass == 3] <- fare3
# Create fare-distance metric for Train
train <- transform(train, fare.distance = fare - fare_avg)
train <- train[, !names(train) %in% c("fare_avg")]
# Create fare-distance metric for Test
test <- transform(test, fare.distance = fare - fare_avg)
test <- test[, !names(test) %in% c("fare_avg")]
###
### Add family column
###
train$family <- NA
test$family <- NA
train$family[which(train$sibsp != 0 | train$parch != 0)] <- 1
train$family[which(train$sibsp == 0 & train$parch == 0)] <- 0
test$family[which(test$sibsp != 0 | test$parch != 0)] <- 1
test$family[which(test$sibsp == 0 & test$parch == 0)] <- 0
test$family <- factor(test$family)
train$family <- factor(train$family)
test$familia <- test$sibsp + test$parch
train$familia <- train$sibsp + train$parch
###
###  Scale the non factors
###
train$age_scale <- (train$age-min(train$age))/(max(train$age-min(train$age)))
train$fare_scale <- (train$fare-min(train$fare))/(max(train$fare-min(train$fare)))
test$age_scale <- (test$age-min(test$age))/(max(test$age-min(test$age)))
test$fare_scale <- (test$fare-min(test$fare))/(max(test$fare-min(test$fare)))
###
### Saving new data sets
###
# Save files as RData in order to preserve data structures
# Open .RData with load()
save("test", file = "Data/test_clean.RData")
save("train", file = "Data/train_clean.RData")
## Save the empty age data
save("test", file = "Data/test_clean_age.RData")
save("train", file = "Data/train_clean_age.RData")
# Save as ARFF for WEKA using foreign
write.arff(test, file = "Data/test_clean.ARFF")
write.arff(train, file = "Data/train_clean.ARFF")
# Also save .csv's just in case. These do not preserve data structures,
# so don't use them in the analysis!
write.csv(test, "Data/CSV/test_clean.csv", row.names = FALSE)
write.csv(train, "Data/CSV/train_clean.csv", row.names = FALSE)
write.csv(full, "Data/CSV/full.csv", row.names = FALSE)
library(plyr)
library(foreign)
# Load the data sets
train <- read.csv("Data/train.csv", stringsAsFactors = FALSE)  # 891 obs
test <- read.csv("Data/test.csv", stringsAsFactors = FALSE)    # 418 obs
###
### Data structures
###
# Create a survived variable in the test data set
# Set "0" (did not survive) as the default value
test$survived <- 0
# Convert catagorical variables to factors
train$survived <- factor(train$survived)
train$sex <- factor(train$sex)
train$pclass <- factor(train$pclass)
test$survived <- factor(test$survived)
test$sex <- factor(test$sex)
test$pclass <- factor(test$pclass)
test$embarked <- factor(test$embarked)
###
### Fixing missing values
###
# 177 missing ages in TRAIN
# 86 missing ages in TEST
# 1 missing fare in TEST
# 2 missing embarked in TRAIN
# Combine the data sets for age/fare modeling
full <- join(test, train, type = "full")
# Multiple Imputation
#library(mi)
#inf <- mi.info(train)
#imp <- mi(train, info = inf, check.coef.convergence = FALSE, n.imp = 2, n.iter = 6, seed = 111)
#plot(imp)
# Create LM models for predicting missing values in AGE and FARE
age.mod <- lm(age ~ pclass + sex +
sibsp + parch + fare, data = full)
fare.mod<- lm(fare ~ pclass + sex +
sibsp + parch + age, data = full)
# Replace missing values in AGE and FARE with prediction
train$age[is.na(train$age)] <- predict(age.mod, train)[is.na(train$age)]
test$age[is.na(test$age)] <- predict(age.mod, test)[is.na(test$age)]
test$fare[is.na(test$fare)] <- predict(fare.mod, test)[is.na(test$fare)]
# Random Forest to find missing values
#full.age <- full[!is.na(full$age), ]  # Remove NA's
#full.age$fare[is.na(full.age$fare)] <- predict(fare.mod, full.age)[is.na(full.age$fare)]
#age.rf <- randomForest(age ~ pclass + sex + sibsp + parch + fare, data = full.age, ntree = 15000)
#train$age[is.na(train$age)] <- predict(age.rf, train)[is.na(train$age)]
#test$age[is.na(test$age)] <- predict(age.rf, test)[is.na(test$age)]
# Replace missing values in embarked with most popular
train$embarked[train$embarked == ""] <- "S"
train$embarked <- factor(train$embarked)
###
### Create "sex.name" variable"
###
library(stringr)
train$sex.name <- 0
test$sex.name <- 0
train$sex.name[!is.na(str_extract(train$name, "Mr"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Mrs"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Mme"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Miss"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Ms"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Mlle"))] <- "Miss"
train$sex.name[!is.na(str_extract(train$name, "Capt"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Major"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Col"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Master"))] <- "Mast"
train$sex.name[!is.na(str_extract(train$name, "Rev"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Dr"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Don"))] <- "Mr"
train$sex.name[!is.na(str_extract(train$name, "Countess"))] <- "Mrs"
train$sex.name[!is.na(str_extract(train$name, "Jonkheer"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Mr"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Mrs"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Mme"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Miss"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Ms"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Mlle"))] <- "Miss"
test$sex.name[!is.na(str_extract(test$name, "Capt"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Major"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Col"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Master"))] <- "Mast"
test$sex.name[!is.na(str_extract(test$name, "Rev"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Dr"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Don"))] <- "Mr"
test$sex.name[!is.na(str_extract(test$name, "Countess"))] <- "Mrs"
test$sex.name[!is.na(str_extract(test$name, "Jonkheer"))] <- "Mr"
test$name[test$sex.name == 0]
train$name[train$sex.name == 0]
train$sex.name <- factor(train$sex.name)
test$sex.name <- factor(test$sex.name)
###
### Create "fare-distance" variable
###
# fare-distance = fare - mean(fare of pclass)
# Are those who pay less than the average for a ticket less likely to survive?
# Find the mean fare for each pclass
class1 <- subset(full, pclass == 1)
class2 <- subset(full, pclass == 2)
class3 <- subset(full, pclass == 3)
fare1 <- mean(class1$fare, na.rm = TRUE)
fare2 <- mean(class2$fare, na.rm = TRUE)
fare3 <- mean(class3$fare, na.rm = TRUE)
# Create fare_avg column
train$fare_avg[train$pclass == 1] <- fare1
train$fare_avg[train$pclass == 2] <- fare2
train$fare_avg[train$pclass == 3] <- fare3
test$fare_avg[test$pclass == 1] <- fare1
test$fare_avg[test$pclass == 2] <- fare2
test$fare_avg[test$pclass == 3] <- fare3
# Create fare-distance metric for Train
train <- transform(train, fare.distance = fare - fare_avg)
train <- train[, !names(train) %in% c("fare_avg")]
# Create fare-distance metric for Test
test <- transform(test, fare.distance = fare - fare_avg)
test <- test[, !names(test) %in% c("fare_avg")]
###
### Add family column
###
train$family <- NA
test$family <- NA
train$family[which(train$sibsp != 0 | train$parch != 0)] <- 1
train$family[which(train$sibsp == 0 & train$parch == 0)] <- 0
test$family[which(test$sibsp != 0 | test$parch != 0)] <- 1
test$family[which(test$sibsp == 0 & test$parch == 0)] <- 0
test$family <- factor(test$family)
train$family <- factor(train$family)
test$familia <- test$sibsp + test$parch
train$familia <- train$sibsp + train$parch
###
###  Scale the non factors
###
train$age_scale <- (train$age-min(train$age))/(max(train$age-min(train$age)))
train$fare_scale <- (train$fare-min(train$fare))/(max(train$fare-min(train$fare)))
test$age_scale <- (test$age-min(test$age))/(max(test$age-min(test$age)))
test$fare_scale <- (test$fare-min(test$fare))/(max(test$fare-min(test$fare)))
###
### Saving new data sets
###
# Save files as RData in order to preserve data structures
# Open .RData with load()
save("test", file = "Data/test_clean.RData")
save("train", file = "Data/train_clean.RData")
## Save the empty age data
save("test", file = "Data/test_clean_age.RData")
save("train", file = "Data/train_clean_age.RData")
# Save as ARFF for WEKA using foreign
write.arff(test, file = "Data/test_clean.ARFF")
write.arff(train, file = "Data/train_clean.ARFF")
# Also save .csv's just in case. These do not preserve data structures,
# so don't use them in the analysis!
write.csv(test, "Data/CSV/test_clean.csv", row.names = FALSE)
write.csv(train, "Data/CSV/train_clean.csv", row.names = FALSE)
write.csv(full, "Data/CSV/full.csv", row.names = FALSE)
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest model
###
# Create random forest based on PCLASS, SEX, FARE, and AGE
forest <- randomForest(survived ~ sex.name + pclass + age + fare + fare.distance,
data = train, ntree = 15000, importance = TRUE)
# Use scaled variables
forest_scale <- randomForest(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, ntree = 15000, importance = TRUE)
summary(forest)
# Extract the importance of each variable
importance(forest)
# Save our model as a string
model <- "randomForest(survived ~ sex.name + pclass + age + fare + fare.distance, data = train, ntree = 5000, importance = TRUE)"
model_scale <- "randomForest(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, ntree = 15000, importance = TRUE)"
###
### Saving our model and prediction as a new CSV
###
# Make our prediction on the TRAIN data set [For calculating error]
train$survived_pred <- predict(forest, train)
train$survived_pred2 <- predict(forest_scale, train)
# Make our prediction on the TEST data set
test$survived <- predict(forest, test)
test2 <- test
test2$survived <- predict(forest_scale, test2)
# save csv file for submission
write.csv(test, "Submissions/randomForest-04.csv")
write.csv(test2, "Submissions/randomForest-05-scale.csv")
###
### CV
###
source("5-model_testing.R")
train_error(survived_pred)
cv_kfolds(model, k = 9)
library(randomForest)
library(plyr)
# Load in the cleaned data sets
load("Data/train_clean.RData")  # 891 obs
load("Data/test_clean.RData")   # 418 obs
###
### Create randomForest model
###
# Create random forest based on PCLASS, SEX, FARE, and AGE
forest <- randomForest(survived ~ sex.name + pclass + age + fare + fare.distance,
data = train, ntree = 15000, importance = TRUE)
# Use scaled variables
forest_scale <- randomForest(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, ntree = 15000, importance = TRUE)
summary(forest)
# Extract the importance of each variable
importance(forest)
# Save our model as a string
model <- "randomForest(survived ~ sex.name + pclass + age + fare + fare.distance, data = train, ntree = 5000, importance = TRUE)"
model_scale <- "randomForest(survived ~ sex.name + pclass + age_scale + fare_scale,
data = train, ntree = 15000, importance = TRUE)"
###
### Saving our model and prediction as a new CSV
###
# Make our prediction on the TRAIN data set [For calculating error]
train$survived_pred <- predict(forest, train)
train$survived_pred2 <- predict(forest_scale, train)
# Make our prediction on the TEST data set
test$survived <- predict(forest, test)
test2 <- test
test2$survived <- predict(forest_scale, test2)
# save csv file for submission
write.csv(test, "Submissions/randomForest-04.csv")
write.csv(test2, "Submissions/randomForest-05-scale.csv")
###
### CV
###
source("5-model_testing.R")
train_error(survived_pred)
cv_kfolds(model, k = 9)
importance(forest)
table(forest)
summary(forest)
forest$confusion
test$survived
test2$survived
